def A(b):
    return
'''Для выполнения задачи требуется выполнение задачи меньшего масштаба- используется рекурсия
Крайний случай должен решать проблему непосредственно! Рассмотрим на примере факториала.'''
def f(n):
    assert n>=0
    if n == 0:
        print('Крайний случай')
        return 1
    print('Прямой ход, n =', n)
    fn = f(n-1)*n
    print('Обратный ход, n=', n)
    return fn
print(f(5))
'''На прямом ходе рекурсии адреса возврата и локальные переменные функции
 записываются в стек, благодаря чему каждый следующий рекурсивный вызов этой функции пользуется
 своим набором локальных переменных и за счёт этого работает корректно. Оборотной стороной этого
 довольно простого по структуре механизма является то, что на каждый рекурсивный вызов требуется
 некоторое количество оперативной памяти компьютера, и при чрезмерно большой глубине рекурсии
 может наступить переполнение стека вызовов. Стек вызов - Last in First out очередь, то есть
 добавляются элементы сверху, береутся тоже сверху '''